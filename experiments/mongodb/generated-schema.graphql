# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AffectedRowsOutput {
  count: Int!
}

type AggregateComment {
  _count: CommentCountAggregate
  _max: CommentMaxAggregate
  _min: CommentMinAggregate
}

type AggregatePost {
  _count: PostCountAggregate
  _max: PostMaxAggregate
  _min: PostMinAggregate
}

type AggregateUser {
  _avg: UserAvgAggregate
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  _sum: UserSumAggregate
}

type Comment {
  comment: String!
  id: String!
  post: Post!
  postId: String!
}

type CommentCountAggregate {
  _all: Int!
  comment: Int!
  id: Int!
  postId: Int!
}

input CommentCountOrderByAggregateInput {
  comment: SortOrder
  id: SortOrder
  postId: SortOrder
}

input CommentCreateInput {
  comment: String!
  id: String
  post: PostCreateNestedOneWithoutCommentsInput!
}

input CommentCreateManyInput {
  comment: String!
  id: String
  postId: String!
}

input CommentCreateManyPostInput {
  comment: String!
  id: String
}

input CommentCreateManyPostInputEnvelope {
  data: [CommentCreateManyPostInput!]!
}

input CommentCreateNestedManyWithoutPostInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutPostInput!]
  create: [CommentCreateWithoutPostInput!]
  createMany: CommentCreateManyPostInputEnvelope
}

input CommentCreateOrConnectWithoutPostInput {
  create: CommentCreateWithoutPostInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateWithoutPostInput {
  comment: String!
  id: String
}

type CommentGroupBy {
  _count: CommentCountAggregate
  _max: CommentMaxAggregate
  _min: CommentMinAggregate
  comment: String!
  id: String!
  postId: String!
}

input CommentListRelationFilter {
  every: CommentWhereInput
  none: CommentWhereInput
  some: CommentWhereInput
}

type CommentMaxAggregate {
  comment: String
  id: String
  postId: String
}

input CommentMaxOrderByAggregateInput {
  comment: SortOrder
  id: SortOrder
  postId: SortOrder
}

type CommentMinAggregate {
  comment: String
  id: String
  postId: String
}

input CommentMinOrderByAggregateInput {
  comment: SortOrder
  id: SortOrder
  postId: SortOrder
}

input CommentOrderByRelationAggregateInput {
  _count: SortOrder
}

input CommentOrderByWithAggregationInput {
  _count: CommentCountOrderByAggregateInput
  _max: CommentMaxOrderByAggregateInput
  _min: CommentMinOrderByAggregateInput
  comment: SortOrder
  id: SortOrder
  postId: SortOrder
}

input CommentOrderByWithRelationInput {
  comment: SortOrder
  id: SortOrder
  post: PostOrderByWithRelationInput
  postId: SortOrder
}

enum CommentScalarFieldEnum {
  comment
  id
  postId
}

input CommentScalarWhereInput {
  AND: [CommentScalarWhereInput!]
  NOT: [CommentScalarWhereInput!]
  OR: [CommentScalarWhereInput!]
  comment: StringFilter
  id: StringFilter
  postId: StringFilter
}

input CommentScalarWhereWithAggregatesInput {
  AND: [CommentScalarWhereWithAggregatesInput!]
  NOT: [CommentScalarWhereWithAggregatesInput!]
  OR: [CommentScalarWhereWithAggregatesInput!]
  comment: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  postId: StringWithAggregatesFilter
}

input CommentUpdateInput {
  comment: StringFieldUpdateOperationsInput
  post: PostUpdateOneRequiredWithoutCommentsNestedInput
}

input CommentUpdateManyMutationInput {
  comment: StringFieldUpdateOperationsInput
}

input CommentUpdateManyWithWhereWithoutPostInput {
  data: CommentUpdateManyMutationInput!
  where: CommentScalarWhereInput!
}

input CommentUpdateManyWithoutPostNestedInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutPostInput!]
  create: [CommentCreateWithoutPostInput!]
  createMany: CommentCreateManyPostInputEnvelope
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutPostInput!]
  updateMany: [CommentUpdateManyWithWhereWithoutPostInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutPostInput!]
}

input CommentUpdateWithWhereUniqueWithoutPostInput {
  data: CommentUpdateWithoutPostInput!
  where: CommentWhereUniqueInput!
}

input CommentUpdateWithoutPostInput {
  comment: StringFieldUpdateOperationsInput
}

input CommentUpsertWithWhereUniqueWithoutPostInput {
  create: CommentCreateWithoutPostInput!
  update: CommentUpdateWithoutPostInput!
  where: CommentWhereUniqueInput!
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  comment: StringFilter
  id: StringFilter
  post: PostRelationFilter
  postId: StringFilter
}

input CommentWhereUniqueInput {
  id: String
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  isSet: Boolean
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input IntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  isSet: Boolean
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

type Mutation {
  createManyComment(data: [CommentCreateManyInput!]!): AffectedRowsOutput!
  createManyPost(data: [PostCreateManyInput!]!): AffectedRowsOutput!
  createManyUser(data: [UserCreateManyInput!]!): AffectedRowsOutput!
  createOneComment(data: CommentCreateInput!): Comment!
  createOnePost(data: PostCreateInput!): Post!
  createOneUser(data: UserCreateInput!): User!
  deleteManyComment(where: CommentWhereInput): AffectedRowsOutput!
  deleteManyPost(where: PostWhereInput): AffectedRowsOutput!
  deleteManyUser(where: UserWhereInput): AffectedRowsOutput!
  deleteOneComment(where: CommentWhereUniqueInput!): Comment
  deleteOnePost(where: PostWhereUniqueInput!): Post
  deleteOneUser(where: UserWhereUniqueInput!): User
  updateManyComment(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): AffectedRowsOutput!
  updateManyPost(data: PostUpdateManyMutationInput!, where: PostWhereInput): AffectedRowsOutput!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput!
  updateOneComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateOnePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertOneComment(create: CommentCreateInput!, update: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment!
  upsertOnePost(create: PostCreateInput!, update: PostUpdateInput!, where: PostWhereUniqueInput!): Post!
  upsertOneUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

input NestedFloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  isSet: Boolean
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  isSet: Boolean
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedIntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  isSet: Boolean
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NullableIntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
  unset: Boolean
}

type Post {
  _count: PostCount
  author: User!
  authorId: String!
  body: String!
  comments(cursor: CommentWhereUniqueInput, distinct: [CommentScalarFieldEnum!], orderBy: [CommentOrderByWithRelationInput!], skip: Int, take: Int, where: CommentWhereInput): [Comment!]!
  id: String!
  slug: String!
  title: String!
}

type PostCount {
  comments: Int!
}

type PostCountAggregate {
  _all: Int!
  authorId: Int!
  body: Int!
  id: Int!
  slug: Int!
  title: Int!
}

input PostCountOrderByAggregateInput {
  authorId: SortOrder
  body: SortOrder
  id: SortOrder
  slug: SortOrder
  title: SortOrder
}

input PostCreateInput {
  author: UserCreateNestedOneWithoutPostsInput!
  body: String!
  comments: CommentCreateNestedManyWithoutPostInput
  id: String
  slug: String!
  title: String!
}

input PostCreateManyAuthorInput {
  body: String!
  id: String
  slug: String!
  title: String!
}

input PostCreateManyAuthorInputEnvelope {
  data: [PostCreateManyAuthorInput!]!
}

input PostCreateManyInput {
  authorId: String!
  body: String!
  id: String
  slug: String!
  title: String!
}

input PostCreateNestedManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutAuthorInput!]
  create: [PostCreateWithoutAuthorInput!]
  createMany: PostCreateManyAuthorInputEnvelope
}

input PostCreateNestedOneWithoutCommentsInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutCommentsInput
  create: PostCreateWithoutCommentsInput
}

input PostCreateOrConnectWithoutAuthorInput {
  create: PostCreateWithoutAuthorInput!
  where: PostWhereUniqueInput!
}

input PostCreateOrConnectWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput!
  where: PostWhereUniqueInput!
}

input PostCreateWithoutAuthorInput {
  body: String!
  comments: CommentCreateNestedManyWithoutPostInput
  id: String
  slug: String!
  title: String!
}

input PostCreateWithoutCommentsInput {
  author: UserCreateNestedOneWithoutPostsInput!
  body: String!
  id: String
  slug: String!
  title: String!
}

type PostGroupBy {
  _count: PostCountAggregate
  _max: PostMaxAggregate
  _min: PostMinAggregate
  authorId: String!
  body: String!
  id: String!
  slug: String!
  title: String!
}

input PostListRelationFilter {
  every: PostWhereInput
  none: PostWhereInput
  some: PostWhereInput
}

type PostMaxAggregate {
  authorId: String
  body: String
  id: String
  slug: String
  title: String
}

input PostMaxOrderByAggregateInput {
  authorId: SortOrder
  body: SortOrder
  id: SortOrder
  slug: SortOrder
  title: SortOrder
}

type PostMinAggregate {
  authorId: String
  body: String
  id: String
  slug: String
  title: String
}

input PostMinOrderByAggregateInput {
  authorId: SortOrder
  body: SortOrder
  id: SortOrder
  slug: SortOrder
  title: SortOrder
}

input PostOrderByRelationAggregateInput {
  _count: SortOrder
}

input PostOrderByWithAggregationInput {
  _count: PostCountOrderByAggregateInput
  _max: PostMaxOrderByAggregateInput
  _min: PostMinOrderByAggregateInput
  authorId: SortOrder
  body: SortOrder
  id: SortOrder
  slug: SortOrder
  title: SortOrder
}

input PostOrderByWithRelationInput {
  author: UserOrderByWithRelationInput
  authorId: SortOrder
  body: SortOrder
  comments: CommentOrderByRelationAggregateInput
  id: SortOrder
  slug: SortOrder
  title: SortOrder
}

input PostRelationFilter {
  is: PostWhereInput
  isNot: PostWhereInput
}

enum PostScalarFieldEnum {
  authorId
  body
  id
  slug
  title
}

input PostScalarWhereInput {
  AND: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  authorId: StringFilter
  body: StringFilter
  id: StringFilter
  slug: StringFilter
  title: StringFilter
}

input PostScalarWhereWithAggregatesInput {
  AND: [PostScalarWhereWithAggregatesInput!]
  NOT: [PostScalarWhereWithAggregatesInput!]
  OR: [PostScalarWhereWithAggregatesInput!]
  authorId: StringWithAggregatesFilter
  body: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  slug: StringWithAggregatesFilter
  title: StringWithAggregatesFilter
}

input PostUpdateInput {
  author: UserUpdateOneRequiredWithoutPostsNestedInput
  body: StringFieldUpdateOperationsInput
  comments: CommentUpdateManyWithoutPostNestedInput
  slug: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input PostUpdateManyMutationInput {
  body: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input PostUpdateManyWithWhereWithoutAuthorInput {
  data: PostUpdateManyMutationInput!
  where: PostScalarWhereInput!
}

input PostUpdateManyWithoutAuthorNestedInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutAuthorInput!]
  create: [PostCreateWithoutAuthorInput!]
  createMany: PostCreateManyAuthorInputEnvelope
  delete: [PostWhereUniqueInput!]
  deleteMany: [PostScalarWhereInput!]
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [PostUpdateManyWithWhereWithoutAuthorInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput!]
}

input PostUpdateOneRequiredWithoutCommentsNestedInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutCommentsInput
  create: PostCreateWithoutCommentsInput
  update: PostUpdateWithoutCommentsInput
  upsert: PostUpsertWithoutCommentsInput
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  data: PostUpdateWithoutAuthorInput!
  where: PostWhereUniqueInput!
}

input PostUpdateWithoutAuthorInput {
  body: StringFieldUpdateOperationsInput
  comments: CommentUpdateManyWithoutPostNestedInput
  slug: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input PostUpdateWithoutCommentsInput {
  author: UserUpdateOneRequiredWithoutPostsNestedInput
  body: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  create: PostCreateWithoutAuthorInput!
  update: PostUpdateWithoutAuthorInput!
  where: PostWhereUniqueInput!
}

input PostUpsertWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput!
  update: PostUpdateWithoutCommentsInput!
}

input PostWhereInput {
  AND: [PostWhereInput!]
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  author: UserRelationFilter
  authorId: StringFilter
  body: StringFilter
  comments: CommentListRelationFilter
  id: StringFilter
  slug: StringFilter
  title: StringFilter
}

input PostWhereUniqueInput {
  id: String
  slug: String
}

type Query {
  aggregateComment(cursor: CommentWhereUniqueInput, orderBy: [CommentOrderByWithRelationInput!], skip: Int, take: Int, where: CommentWhereInput): AggregateComment!
  aggregatePost(cursor: PostWhereUniqueInput, orderBy: [PostOrderByWithRelationInput!], skip: Int, take: Int, where: PostWhereInput): AggregatePost!
  aggregateUser(cursor: UserWhereUniqueInput, orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): AggregateUser!
  comment(where: CommentWhereUniqueInput!): Comment
  comments(cursor: CommentWhereUniqueInput, distinct: [CommentScalarFieldEnum!], orderBy: [CommentOrderByWithRelationInput!], skip: Int, take: Int, where: CommentWhereInput): [Comment!]!
  findFirstComment(cursor: CommentWhereUniqueInput, distinct: [CommentScalarFieldEnum!], orderBy: [CommentOrderByWithRelationInput!], skip: Int, take: Int, where: CommentWhereInput): Comment
  findFirstPost(cursor: PostWhereUniqueInput, distinct: [PostScalarFieldEnum!], orderBy: [PostOrderByWithRelationInput!], skip: Int, take: Int, where: PostWhereInput): Post
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User
  groupByComment(by: [CommentScalarFieldEnum!]!, having: CommentScalarWhereWithAggregatesInput, orderBy: [CommentOrderByWithAggregationInput!], skip: Int, take: Int, where: CommentWhereInput): [CommentGroupBy!]!
  groupByPost(by: [PostScalarFieldEnum!]!, having: PostScalarWhereWithAggregatesInput, orderBy: [PostOrderByWithAggregationInput!], skip: Int, take: Int, where: PostWhereInput): [PostGroupBy!]!
  groupByUser(by: [UserScalarFieldEnum!]!, having: UserScalarWhereWithAggregatesInput, orderBy: [UserOrderByWithAggregationInput!], skip: Int, take: Int, where: UserWhereInput): [UserGroupBy!]!
  post(where: PostWhereUniqueInput!): Post
  posts(cursor: PostWhereUniqueInput, distinct: [PostScalarFieldEnum!], orderBy: [PostOrderByWithRelationInput!], skip: Int, take: Int, where: PostWhereInput): [Post!]!
  user(where: UserWhereUniqueInput!): User
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

enum QueryMode {
  default
  insensitive
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type User {
  _count: UserCount
  address: UserAddress!
  age: Int
  email: String!
  id: String!
  posts(cursor: PostWhereUniqueInput, distinct: [PostScalarFieldEnum!], orderBy: [PostOrderByWithRelationInput!], skip: Int, take: Int, where: PostWhereInput): [Post!]!
}

type UserAddress {
  city: String!
  number: Int
  street: String!
}

input UserAddressCompositeFilter {
  equals: UserAddressObjectEqualityInput
  is: UserAddressWhereInput
  isNot: UserAddressWhereInput
}

input UserAddressCreateEnvelopeInput {
  set: UserAddressCreateInput
}

input UserAddressCreateInput {
  city: String!
  number: Int
  street: String!
}

input UserAddressObjectEqualityInput {
  city: String!
  number: Int
  street: String!
}

input UserAddressOrderByInput {
  city: SortOrder
  number: SortOrder
  street: SortOrder
}

input UserAddressUpdateEnvelopeInput {
  set: UserAddressCreateInput
  update: UserAddressUpdateInput
}

input UserAddressUpdateInput {
  city: StringFieldUpdateOperationsInput
  number: NullableIntFieldUpdateOperationsInput
  street: StringFieldUpdateOperationsInput
}

input UserAddressWhereInput {
  AND: [UserAddressWhereInput!]
  NOT: [UserAddressWhereInput!]
  OR: [UserAddressWhereInput!]
  city: StringFilter
  number: IntNullableFilter
  street: StringFilter
}

type UserAvgAggregate {
  age: Float
}

input UserAvgOrderByAggregateInput {
  age: SortOrder
}

type UserCount {
  posts: Int!
}

type UserCountAggregate {
  _all: Int!
  age: Int!
  email: Int!
  id: Int!
}

input UserCountOrderByAggregateInput {
  age: SortOrder
  email: SortOrder
  id: SortOrder
}

input UserCreateInput {
  address: UserAddressCreateEnvelopeInput!
  age: Int
  email: String!
  id: String
  posts: PostCreateNestedManyWithoutAuthorInput
}

input UserCreateManyInput {
  address: UserAddressCreateEnvelopeInput!
  age: Int
  email: String!
  id: String
}

input UserCreateNestedOneWithoutPostsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPostsInput
  create: UserCreateWithoutPostsInput
}

input UserCreateOrConnectWithoutPostsInput {
  create: UserCreateWithoutPostsInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutPostsInput {
  address: UserAddressCreateEnvelopeInput!
  age: Int
  email: String!
  id: String
}

type UserGroupBy {
  _avg: UserAvgAggregate
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  _sum: UserSumAggregate
  age: Int
  email: String!
  id: String!
}

type UserMaxAggregate {
  age: Int
  email: String
  id: String
}

input UserMaxOrderByAggregateInput {
  age: SortOrder
  email: SortOrder
  id: SortOrder
}

type UserMinAggregate {
  age: Int
  email: String
  id: String
}

input UserMinOrderByAggregateInput {
  age: SortOrder
  email: SortOrder
  id: SortOrder
}

input UserOrderByWithAggregationInput {
  _avg: UserAvgOrderByAggregateInput
  _count: UserCountOrderByAggregateInput
  _max: UserMaxOrderByAggregateInput
  _min: UserMinOrderByAggregateInput
  _sum: UserSumOrderByAggregateInput
  age: SortOrder
  email: SortOrder
  id: SortOrder
}

input UserOrderByWithRelationInput {
  address: UserAddressOrderByInput
  age: SortOrder
  email: SortOrder
  id: SortOrder
  posts: PostOrderByRelationAggregateInput
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  age
  email
  id
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput!]
  NOT: [UserScalarWhereWithAggregatesInput!]
  OR: [UserScalarWhereWithAggregatesInput!]
  age: IntNullableWithAggregatesFilter
  email: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
}

type UserSumAggregate {
  age: Int
}

input UserSumOrderByAggregateInput {
  age: SortOrder
}

input UserUpdateInput {
  address: UserAddressUpdateEnvelopeInput
  age: NullableIntFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutAuthorNestedInput
}

input UserUpdateManyMutationInput {
  address: UserAddressUpdateEnvelopeInput
  age: NullableIntFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutPostsNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPostsInput
  create: UserCreateWithoutPostsInput
  update: UserUpdateWithoutPostsInput
  upsert: UserUpsertWithoutPostsInput
}

input UserUpdateWithoutPostsInput {
  address: UserAddressUpdateEnvelopeInput
  age: NullableIntFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
}

input UserUpsertWithoutPostsInput {
  create: UserCreateWithoutPostsInput!
  update: UserUpdateWithoutPostsInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  address: UserAddressCompositeFilter
  age: IntNullableFilter
  email: StringFilter
  id: StringFilter
  posts: PostListRelationFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
}
