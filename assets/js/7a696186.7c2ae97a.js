"use strict";(self.webpackChunktypegraphql_prisma_website=self.webpackChunktypegraphql_prisma_website||[]).push([[168],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(n),u=o,y=m["".concat(s,".").concat(u)]||m[u]||d[u]||a;return n?r.createElement(y,i(i({ref:t},c),{},{components:n})):r.createElement(y,i({ref:t},c))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5602:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var r=n(7462),o=(n(7294),n(3905));const a={title:"Emit only selected blocks",sidebar_label:"Emit selected blocks",sidebar_position:11},i=void 0,l={unversionedId:"advanced/emit-blocks",id:"advanced/emit-blocks",title:"Emit only selected blocks",description:"If you don't want to have generated all the CRUD API with all resolvers, arguments, inputs, outputs, models, etc., you can provide an emitOnly generator option, which accepts a string list of values",source:"@site/../docs/advanced/emit-blocks.md",sourceDirName:"advanced",slug:"/advanced/emit-blocks",permalink:"/docs/advanced/emit-blocks",draft:!1,editUrl:"https://github.com/nestql/prisma-crud/edit/main/docs/../docs/advanced/emit-blocks.md",tags:[],version:"current",sidebarPosition:11,frontMatter:{title:"Emit only selected blocks",sidebar_label:"Emit selected blocks",sidebar_position:11},sidebar:"docs",previous:{title:"Applying decorators",permalink:"/docs/advanced/additional-decorators"},next:{title:"Simple resolvers",permalink:"/docs/advanced/simple-resolvers"}},s={},p=[],c={toc:p};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"If you don't want to have generated all the CRUD API with all resolvers, arguments, inputs, outputs, models, etc., you can provide an ",(0,o.kt)("inlineCode",{parentName:"p"},"emitOnly")," generator option, which accepts a string list of values: ",(0,o.kt)("inlineCode",{parentName:"p"},"enums"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"models"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"crudResolvers"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"relationResolvers"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"inputs")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"outputs"),", e.g.:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-prisma",metastring:"{3}","{3}":!0},'generator typegraphql {\n  provider = "typegraphql-prisma"\n  emitOnly = "models,inputs"\n}\n')),(0,o.kt)("p",null,"This way the generator will emit only the parts that you're interested in, like models and inputs but without outputs or resolvers."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Be aware that e.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"models")," requires ",(0,o.kt)("inlineCode",{parentName:"p"},"enums")," in order to compile.\nSo sometimes you will receive more generated items than only those listed in ",(0,o.kt)("inlineCode",{parentName:"p"},"emitOnly"),", especially when it comes to ",(0,o.kt)("inlineCode",{parentName:"p"},"crudResolvers")," that requires almost all the pieces being generated.")))}d.isMDXComponent=!0}}]);