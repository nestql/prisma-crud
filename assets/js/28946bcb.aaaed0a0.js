"use strict";(self.webpackChunktypegraphql_prisma_website=self.webpackChunktypegraphql_prisma_website||[]).push([[295],{3905:(e,t,n)=>{n.d(t,{Zo:()=>o,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},o=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,o=i(e,["components","mdxType","originalType","parentName"]),c=u(n),m=a,b=c["".concat(s,".").concat(m)]||c[m]||d[m]||l;return n?r.createElement(b,p(p({ref:t},o),{},{components:n})):r.createElement(b,p({ref:t},o))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,p=new Array(l);p[0]=c;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,p[1]=i;for(var u=2;u<l;u++)p[u]=n[u];return r.createElement.apply(null,p)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>p});var r=n(7294),a=n(6010);const l="tabItem_Ymn6";function p(e){let{children:t,hidden:n,className:p}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(l,p),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>m});var r=n(7462),a=n(7294),l=n(6010),p=n(2389),i=n(7392),s=n(7094),u=n(2466);const o="tabList__CuJ",d="tabItem_LNqP";function c(e){var t,n;const{lazy:p,block:c,defaultValue:m,values:b,groupId:y,className:f}=e,v=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),h=null!=b?b:v.map((e=>{let{props:{value:t,label:n,attributes:r}}=e;return{value:t,label:n,attributes:r}})),g=(0,i.l)(h,((e,t)=>e.value===t.value));if(g.length>0)throw new Error('Docusaurus error: Duplicate values "'+g.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const k=null===m?m:null!=(t=null!=m?m:null==(n=v.find((e=>e.props.default)))?void 0:n.props.value)?t:v[0].props.value;if(null!==k&&!h.some((e=>e.value===k)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+k+'" but none of its children has the corresponding value. Available values are: '+h.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:I,setTabGroupChoices:T}=(0,s.U)(),[w,O]=(0,a.useState)(k),N=[],{blockElementScrollPositionUntilNextRender:U}=(0,u.o5)();if(null!=y){const e=I[y];null!=e&&e!==w&&h.some((t=>t.value===e))&&O(e)}const x=e=>{const t=e.currentTarget,n=N.indexOf(t),r=h[n].value;r!==w&&(U(t),O(r),null!=y&&T(y,String(r)))},S=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{var r;const t=N.indexOf(e.currentTarget)+1;n=null!=(r=N[t])?r:N[0];break}case"ArrowLeft":{var a;const t=N.indexOf(e.currentTarget)-1;n=null!=(a=N[t])?a:N[N.length-1];break}}null==(t=n)||t.focus()};return a.createElement("div",{className:(0,l.Z)("tabs-container",o)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":c},f)},h.map((e=>{let{value:t,label:n,attributes:p}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:w===t?0:-1,"aria-selected":w===t,key:t,ref:e=>N.push(e),onKeyDown:S,onFocus:x,onClick:x},p,{className:(0,l.Z)("tabs__item",d,null==p?void 0:p.className,{"tabs__item--active":w===t})}),null!=n?n:t)}))),p?(0,a.cloneElement)(v.filter((e=>e.props.value===w))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},v.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==w})))))}function m(e){const t=(0,p.Z)();return a.createElement(c,(0,r.Z)({key:String(t)},e))}},2047:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>u,toc:()=>d});var r=n(7462),a=(n(7294),n(3905)),l=n(5488),p=n(5162);const i={title:"Simple and flat inputs",sidebar_label:"Simple inputs",sidebar_position:9},s=void 0,u={unversionedId:"advanced/simple-inputs",id:"advanced/simple-inputs",title:"Simple and flat inputs",description:"In version 2.6.0, Prisma released atomicNumberOperations preview feature that allows you to update scalar fields without checking the current value, e.g. increment or decrement a number value.",source:"@site/../docs/advanced/simple-inputs.mdx",sourceDirName:"advanced",slug:"/advanced/simple-inputs",permalink:"/docs/advanced/simple-inputs",draft:!1,editUrl:"https://github.com/nestql/prisma-crud/edit/main/docs/../docs/advanced/simple-inputs.mdx",tags:[],version:"current",sidebarPosition:9,frontMatter:{title:"Simple and flat inputs",sidebar_label:"Simple inputs",sidebar_position:9},sidebar:"docs",previous:{title:"Unchecked scalars input",permalink:"/docs/advanced/unchecked-scalars"},next:{title:"Applying decorators",permalink:"/docs/advanced/additional-decorators"}},o={},d=[],c={toc:d};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"In version 2.6.0, Prisma released ",(0,a.kt)("inlineCode",{parentName:"p"},"atomicNumberOperations")," preview feature that allows you to update scalar fields without checking the current value, e.g. increment or decrement a number value."),(0,a.kt)("p",null,"However, GraphQL does not support input unions, hence it's not possible to support both simple scalar fields and atomic operation inputs at the same time. So, if you prefer simplicity over more complex approach using nested inputs, you can provide the ",(0,a.kt)("inlineCode",{parentName:"p"},"useSimpleInputs")," generator option:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-prisma"},'generator typegraphql {\n  provider        = "typegraphql-prisma"\n  output          = "../prisma/generated/type-graphql"\n  // highlight-next-line\n  useSimpleInputs = true\n}\n')),(0,a.kt)("p",null,"By using this option, instead of generating nested inputs with ",(0,a.kt)("inlineCode",{parentName:"p"},"IntFieldUpdateOperationsInput")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"StringFieldUpdateOperationsInput")," as a field type, it will emit much simpler version of inputs for update operations - with just scalar values:"),(0,a.kt)(l.Z,{mdxType:"Tabs"},(0,a.kt)(p.Z,{value:"true",label:"useSimpleInputs = true",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'@TypeGraphQL.InputType("CategoryUpdateInput", {\n  isAbstract: true,\n})\nexport class CategoryUpdateInput {\n  @TypeGraphQL.Field(_type => String, {\n    nullable: true,\n  })\n  name?: string | undefined;\n\n  @TypeGraphQL.Field(_type => String, {\n    nullable: true,\n  })\n  slug?: string | undefined;\n\n  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {\n    nullable: true,\n  })\n  number?: number | undefined;\n}\n'))),(0,a.kt)(p.Z,{value:"false",label:"useSimpleInputs = false",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'@TypeGraphQL.InputType("CategoryUpdateInput", {\n  isAbstract: true,\n})\nexport class CategoryUpdateInput {\n  @TypeGraphQL.Field(_type => StringFieldUpdateOperationsInput, {\n    nullable: true,\n  })\n  name?: StringFieldUpdateOperationsInput | undefined;\n\n  @TypeGraphQL.Field(_type => StringFieldUpdateOperationsInput, {\n    nullable: true,\n  })\n  slug?: StringFieldUpdateOperationsInput | undefined;\n\n  @TypeGraphQL.Field(_type => IntFieldUpdateOperationsInput, {\n    nullable: true,\n  })\n  number?: IntFieldUpdateOperationsInput | undefined;\n}\n')))),(0,a.kt)("p",null,"Same goes to array fields and nested documents, when you're using MongoDB as your Prisma db provider.\nBy using this option, instead of generating nested inputs with ",(0,a.kt)("inlineCode",{parentName:"p"},"XYZEnvelopeInput")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"FooCreateBarInput")," as a field type, it will emit much simpler version of inputs:"),(0,a.kt)(l.Z,{mdxType:"Tabs"},(0,a.kt)(p.Z,{value:"true",label:"useSimpleInputs = true",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'@TypeGraphQL.InputType("UserUpdateInput", {\n  isAbstract: true,\n})\nexport class UserUpdateInput {\n  @TypeGraphQL.Field(_type => [TypeGraphQL.Int], {\n    nullable: true,\n  })\n  luckyNumbers?: number[] | undefined;\n\n  @TypeGraphQL.Field(_type => UserAddressCreateInput, {\n    nullable: true,\n  })\n  address?: UserAddressCreateInput | undefined;\n}\n'))),(0,a.kt)(p.Z,{value:"false",label:"useSimpleInputs = false",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'@TypeGraphQL.InputType("UserUpdateInput", {\n  isAbstract: true,\n})\nexport class UserUpdateInput {\n  @TypeGraphQL.Field(_type => UserCreateluckyNumbersInput, {\n    nullable: true,\n  })\n  luckyNumbers?: UserCreateluckyNumbersInput | undefined;\n\n  @TypeGraphQL.Field(_type => UserAddressUpdateEnvelopeInput, {\n    nullable: true,\n  })\n  address?: UserAddressUpdateEnvelopeInput | undefined;\n}\n')))))}m.isMDXComponent=!0}}]);