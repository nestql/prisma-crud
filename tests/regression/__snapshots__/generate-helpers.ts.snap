// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`helpers should properly emit helpers file: helpers 1`] = `
"
export function transformFields(fields: Record<string, any>): Record<string, any> {
  return Object.fromEntries(
    Object.entries(fields)
      // remove __typename and others
      .filter(([key, value]) => !key.startsWith(\\"__\\"))
      .map<[string, any]>(([key, value]) => {
        if (Object.keys(value).length === 0) {
          return [key, true];
        }
        return [key, transformFields(value)];
      }),
  );
}

export function getPrismaFromContext(context: any) {
  const prismaClient = context[\\"prisma\\"];
  if (!prismaClient) {
    throw new Error(\\"Unable to find Prisma Client in GraphQL context. Please provide it under the \`context[\\\\\\"prisma\\\\\\"]\` key.\\");
  }
  return prismaClient;
}

export function transformCountFieldIntoSelectRelationsCount(_count: object) {
  return {
    include: {
      _count: {
        select: {
          ...Object.fromEntries(
            Object.entries(_count).filter(([_, v]) => v != null)
          ),
        }
      },
    },
  }
}



"
`;

exports[`helpers when contextPrismaKey generator option is set should properly generate \`getPrismaFromContext\`: helpers 1`] = `
"
export function transformFields(fields: Record<string, any>): Record<string, any> {
  return Object.fromEntries(
    Object.entries(fields)
      // remove __typename and others
      .filter(([key, value]) => !key.startsWith(\\"__\\"))
      .map<[string, any]>(([key, value]) => {
        if (Object.keys(value).length === 0) {
          return [key, true];
        }
        return [key, transformFields(value)];
      }),
  );
}

export function getPrismaFromContext(context: any) {
  const prismaClient = context[\\"samplePrisma\\"];
  if (!prismaClient) {
    throw new Error(\\"Unable to find Prisma Client in GraphQL context. Please provide it under the \`context[\\\\\\"samplePrisma\\\\\\"]\` key.\\");
  }
  return prismaClient;
}

export function transformCountFieldIntoSelectRelationsCount(_count: object) {
  return {
    include: {
      _count: {
        select: {
          ...Object.fromEntries(
            Object.entries(_count).filter(([_, v]) => v != null)
          ),
        }
      },
    },
  }
}



"
`;
